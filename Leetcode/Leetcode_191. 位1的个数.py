# 191. 位1的个数
# 编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为汉明重量）。
# 提示：
# 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，
# 因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
# 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的示例 3中，输入表示有符号整数 -3。
# 示例 3：
# 输入：11111111111111111111111111111101
# 输出：31
# 解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
def hammingWeight_simple(n: int):
    return bin(n).count('1')


n1 = 0b00000000000000000000000000001011
hammingWeight_simple(n1)
n2 = 0b00000000000000000000000010000000
hammingWeight_simple(n2)
n3 = 11111111111111111111111111111101
hammingWeight_simple(n3)


# 位运算
# 思路及解法
# 观察这个运算：n1 & (n1 - 1)，其预算结果恰为把 n1 的二进制位中的最低位的 1 变为 0 之后的结果。
# 如：6 & (6 - 1) = 4, 6 = (110)_2, 4 = (100)_2，运算结果 4 即为把 6 的二进制位中的最低位的 1 变为 0 之后的结果。
def hammingWeight_bitComputation(n: int):
    result = 0
    while n != 0:
        n = n & (n - 1)
        result += 1
    return result


n1 = 0b00000000000000000000000000001011
hammingWeight_bitComputation(n1)
n2 = 0b00000000000000000000000010000000
hammingWeight_bitComputation(n2)
n3 = 11111111111111111111111111111101
hammingWeight_bitComputation(n3)
